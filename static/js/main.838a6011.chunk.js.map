{"version":3,"sources":["logo.svg","RestLog.js","store.js","Login.js","App.js","index.js","reportWebVitals.js"],"names":["RestLog","props","listen","ajaxListener","tempOpen","XMLHttpRequest","prototype","open","tempSend","send","callback","this","url","includes","log","method","split","data","a","b","apply","arguments","toLowerCase","onClick","clear","bind","messageLog","map","request","i","message","push","forceUpdate","Component","initState","users","username","password","loginToken","store","createStore","state","action","type","Object","assign","newUsers","token","loginParam","console","window","__REDUX_DEVTOOLS_EXTENSION__","LoginPane","updateLoginParams","login","formSubmit","display","there","that","callRest","readyState","DONE","JSON","parse","responseText","dispatch","Array","isArray","setState","alert","err","Promise","resolve","reject","getState","stringify","loginMode","getResponseHeader","parameter","e","target","value","preventDefault","then","getUsers","className","style","onSubmit","padding","placeholder","defaultValue","onChange","App","updateUserId","handleChangeName","renderPropertyValue","patchName","selectedUserId","selectedUserInfo","newName","endpoint","body","startsWith","substr","xhr","setRequestHeader","withCredentials","onreadystatechange","prop","charAt","toUpperCase","replace","uid","id","patchBody","operationList","ukey","index","findIndex","user","name","key","val","indexOf","Date","toLocaleString","userId","me","tableRows","userInfo","headerDisplay","forEach","cleanPropertyName","src","logo","alt","length","render","ReactDOM","StrictMode","document","getElementById","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reportWebVitals","subscribe"],"mappings":"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","file":"static/js/main.838a6011.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\timport React, { Component } from 'react';\n\n\t//react component to display all rest api calls in a simple unordered list.\n\texport class RestLog extends Component {\n\n\t\tconstructor(props){\n\t\t\tsuper(props);\n\t\t\tthis.listen();\n\t\t}\n\n\t\t//listener function for all xhr calls\n\t\tlisten() {\n\t\t\tvar ajaxListener = {};\n\t\t\tajaxListener.tempOpen = XMLHttpRequest.prototype.open;\n\t\t\tajaxListener.tempSend = XMLHttpRequest.prototype.send;\n\t\t\tajaxListener.callback = function () {\n\t\t\t\t// this.method :the ajax method used\n\t\t\t\t// this.url    :the url of the requested script (including query string, if any) (urlencoded) \n\t\t\t\t// this.data   :the data sent, if any ex: foo=bar&a=b (urlencoded)\n\n\t\t\t\t//filters xhr calls to only display calls made using the rest api. This can be modified to display more/less info.\n\t\t\t\tif (this.url.includes('api/')) {\n\t\t\t\t\tRestLog.log(this.method, this.url.split('api/')[0] + \"api/\", this.data, this.url.split('api/')[1]);\n\t\t\t\t}\n\t\t\t}\t\t\n\n\t\t\tXMLHttpRequest.prototype.open = function(a=\"\",b=\"\") {\n\t\t\t\tajaxListener.tempOpen.apply(this, arguments);\n\t\t\t\tajaxListener.method = a;  \n\t\t\t\tajaxListener.url = b;\n\t\t\t\tif (a.toLowerCase() === 'get') {\n\t\t\t\t\tajaxListener.data = b.split('?');\n\t\t\t\t\tajaxListener.data = ajaxListener.data[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tXMLHttpRequest.prototype.send = function(a=\"\",b=\"\") {\n\t\t\t\tajaxListener.tempSend.apply(this, arguments);\n\t\t\t\tif(ajaxListener.method.toLowerCase() === 'post')ajaxListener.data = a;\n\t\t\t\tajaxListener.callback();\n\t\t\t}\n\t\t}\n\n\t\t//log of all xhr calls\n\t\tstatic messageLog = [];\n\n\t\t//function to write to log\n\t\tstatic log(method=\"N/A\", url=\"N/A\", data=\"N/A\", message=\"\") {\n\t\t\tthis.messageLog.push({method: method, url: url, message: message, data: data});\n\t\t}\n\n\t\t//resets log of api calls and clears div\n\t\tstatic clear() {\n\t\t\tRestLog.messageLog = [];\n\t\t\tthis.forceUpdate();\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={RestLog.clear.bind(this)}>clear</button>\n\n\t\t\t        <ul>\n\t\t\t            {RestLog.messageLog ? \n\t\t                \t(RestLog.messageLog.map(function(request, i){\n\t\t                \t\treturn <li key={request.method + i}> <b>{request.method}:</b> {request.url}<b>{request.message}</b> <br/>\n\t\t                \t\t</li>;})\n\t\t\t                ) : (<li>No REST calls yet</li>)}\n\t\t\t        </ul>\n\t\t        </div>\n\t\t\t) \n\t\t}\n\t}","import { createStore } from 'redux';\n\nconst reducer = function (state, action) {\n    switch (action.type) {\n        case 'update_users':\n            return Object.assign({}, state, {users: action.newUsers});\n        case 'update_token':\n            return Object.assign({}, state, {loginToken: action.token});\n        case 'set_url':\n            return Object.assign({}, state, {url: action.loginParam});\n        case 'set_username':\n            console.log(action);\n            return Object.assign({}, state, {username: action.loginParam});\n        case 'set_password':\n            return Object.assign({}, state, {password: action.loginParam});\n        default:\n            return state;\n    }\n}\n\nconst DEFAULT_USERNAME = '';\nconst DEFAULT_PASSWORD = '';\nconst DEFAULT_REST_SERVER = 'https://env-nnnnnn.customer.cloud.microstrategy.com/MicroStrategyLibrary/api/';\nconst initState = {users: null, username: DEFAULT_USERNAME, password: DEFAULT_PASSWORD, url: DEFAULT_REST_SERVER, loginToken: null};\n\nconst store = createStore(reducer, initState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n","import React, { Component } from 'react';\nimport './App.css';\nimport store from './store.js';\n\n//this pane logs in and then immediately pulls the list of users from the server.\n//on fail, it will ask to log in again and display a user friendly error message.\nexport class LoginPane extends Component {\n\n    constructor(props) {\n        super(props);\n        this.updateLoginParams = this.updateLoginParams.bind(this);\n        this.login = this.login.bind(this);\n        this.formSubmit = this.formSubmit.bind(this);\n        this.state = {\n            display: 'flex'\n        }\n    }\n\n    //method using rest API to get a list of users\n    getUsers(there) {\n        let that = there;\n        there.props.callRest('GET', 'users', '', function() {\n            if (this.readyState === XMLHttpRequest.DONE) {\n                try{\n                    let newUsers = JSON.parse(this.responseText);\n                    store.dispatch({type: 'update_users', newUsers: newUsers});\n                    if (Array.isArray(newUsers)) {\n                        that.setState({display: 'none'});\n                    }\n                    else {\n                        alert('login failed');\n                    }\n                }\n                catch(err){\n                    alert('login failed!');\n                    that.setState({display: 'flex'});\n                }\n            }\n        });\n    }\n\n    //method to log in using rest API\n    login() {\n        return new Promise((resolve, reject) => {\n            if (!store.getState().loginToken) {\n                try {\n                    this.props.callRest('POST', 'auth/login', JSON.stringify({loginMode: 1, username: store.getState().username, password: store.getState().password}), function() {\n                        if (this.readyState === XMLHttpRequest.DONE) {\n                            store.dispatch({type: 'update_token', token: this.getResponseHeader('X-MSTR-AuthToken')});\n                            if (store.getState().loginToken) {\n                                resolve();\n                            }\n                            else {\n                                alert('login failed!');\n                            }\n                        }\n                    });\n                }\n                catch(err) {\n                    alert('login failed!');\n                }\n            }\n        });\n    }\n\n    //dispatches an action with type (url, username, password) that calls an action to update\n    //the store url/username/password respectively with the new value\n    updateLoginParams(parameter, e){\n        store.dispatch({type: parameter, loginParam: e.target.value});\n    }\n\n    //login button submission\n    formSubmit(e){\n        let that = this;\n        e.preventDefault();\n        this.login().then(() => this.getUsers(that));\n    }\n\n    render() {\n        return (\n            <div className=\"login-backdrop\" style={{display: this.state.display}}>\n                <div className=\"login-form\">\n                    <div className=\"panel-title\">Log In</div>\n                    <form onSubmit={this.formSubmit} style={{padding:'5px'}}>\n                        <label>\n                            {/*Login form sets login and url parameters for rest calls*/}\n                            {/*store.getState().x gets the current value of the field 'x' in the store object*/}\n                            <input type=\"text\" placeholder='REST API URL' defaultValue={store.getState().url} onChange= {(e) => this.updateLoginParams(\"set_url\", e)} /><br/>\n                            <input type=\"text\" placeholder='username' defaultValue={store.getState().username} onChange= {(e) => this.updateLoginParams(\"set_username\", e)}/><br/>\n                            <input type=\"password\" placeholder='password' defaultValue={store.getState().password} onChange= {(e) => this.updateLoginParams(\"set_password\", e)}/><br/>\n                        </label>\n                        <input type=\"submit\" value=\"Login\" />\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { RestLog } from './RestLog.js';\nimport { LoginPane } from './Login.js';\nimport store from './store.js'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        //set context for all functions\n        this.callRest = this.callRest.bind(this);\n        this.updateUserId = this.updateUserId.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.renderPropertyValue = this.renderPropertyValue.bind(this);\n        this.patchName = this.patchName.bind(this);\n\n        //Wrote this without redux - state contains a login token, information about the selected users, and login\n        //parameters for the api calls. Also a flag on whether or not to show the login div\n        this.state = {\n            selectedUserId: '',\n            selectedUserInfo: {},\n            newName: ''\n        };\n    }\n\n    /*\n        helper method for making rest api calls\n        @param method: the HTTP request method(GET, POST, etc)\n        @param endpoint: the API endpoint. Expected format: 'endpoint/'\n        @param body: the body to be sent\n        @param callback: callback function to be called onreadystatechange\n    */\n    callRest(method, endpoint, body, callback) {\n\n        if (endpoint.startsWith('/')) {\n            endpoint = endpoint.substr(1);\n        }\n\n        //create xhr request based on parameters passed into function\n        let xhr = new XMLHttpRequest();\n        xhr.open(method, store.getState().url + endpoint);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.withCredentials = true;\n        let token = store.getState().loginToken;\n        if (token) {\n            xhr.setRequestHeader('X-MSTR-AuthToken', token);\n        }\n        xhr.onreadystatechange = callback;\n\n        try {\n            xhr.send(body);\n        } catch (err) {\n            console.log(err);\n            alert('error: could not send http request');\n        }\n    }\n\n    //UserEditor functions\n    cleanPropertyName(prop) {\n        //makes display of prop names nicer\n        prop = prop.charAt(0).toUpperCase() + prop.substr(1);\n        return prop.replace(/([A-Z]+)/g, ' $1').replace(/([A-Z][a-z])/g, ' $1');\n    }\n\n    //handles a name change for the currently selected user\n    patchName() {\n        let uid = this.state.selectedUserInfo.id,\n        patchBody = {\n            operationList: [\n                {\n                    'op': 'REPLACE',\n                    'path': '/fullName',\n                    'value': this.state.newName\n                }\n            ]\n        };\n\n        //submits call to rest api for the name change\n        this.callRest('PATCH', 'users/' + uid, JSON.stringify(patchBody), function () {\n            if (this.readyState === XMLHttpRequest.DONE) {\n                alert('Name has been updated');\n            }\n        });\n\n        //update user name in list\n        const ukey = this.state.selectedUserId;\n        const index = store.getState().users.findIndex(user => user.id === ukey);\n        //as to not mutate state directly\n        const users = store.getState().users;\n        users[index].name = this.state.newName;\n        store.dispatch({type: 'update_users', newUsers: users});\n    }\n\n    //changes name in state whne it is updated in the text box, calls patch when enter is pressed\n    handleChangeName(e) {\n        this.setState({newName : e.target.value});\n        //on enter key press, make rest call to change selected user name\n        if (e.key === 'Enter') {\n            this.patchName();\n        }\n    }\n\n    //Puts date into human-readable format, and changes name display to an input textbox\n    renderPropertyValue(name, val) {\n        //date formatting\n        if (name.indexOf('date') >= 0) {\n            try {\n                return (new Date(val)).toLocaleString();\n            } catch (e){} //ignore\n        //name to input condition\n        } else if (name === 'fullName') {\n            return <input type='text' defaultValue={val} key={this.state.selectedUserInfo.id}\n                          onChange = {this.handleChangeName} />;\n        }\n        return val;\n    }\n    //end of UE functions\n\n\n    //changes selected user whenever a new user is clicked\n    updateUserId(userId){\n        this.setState({selectedUserId: userId});\n        let me = this;\n\n        if (userId) {\n            this.callRest('GET', 'users/' + userId, '', function () {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    me.setState({selectedUserInfo: JSON.parse(this.responseText)});\n                }\n            });\n        }\n    }\n\n    render() {\n        //more UserEditor stuff\n        const validProps = [\"username\", \"fullName\", \"id\", \"abbreviation\", \"dateCreated\", \"dateModified\"];\n        let tableRows = [],\n            userInfo = this.state.selectedUserInfo,\n            headerDisplay = \"none\";\n        if (userInfo && userInfo.id) {\n            try {\n                validProps.forEach(\n                    (prop, i) => (userInfo[prop]) ? tableRows.push(<tr key={userInfo.id + i}>\n                        <td>{this.cleanPropertyName(prop)}</td>\n                        <td>{this.renderPropertyValue(prop, userInfo[prop])}</td>\n                    </tr>):null\n                )\n                headerDisplay = \"table\";\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        //end of UE\n\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <span className=\"App-title\">React User Manager</span>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n              <div className=\"container\">\n                  <div className=\"fixed\">\n                      <div className=\"panel-title\">\n                          List of Users\n                          <div className=\"subtitle\">Select user below to get user information</div>\n                      </div>\n                      <ul>\n                          {/*dynamic display for list of users*/}\n                          {store.getState().users && Array.isArray(store.getState().users) && store.getState().users.length > 0 ?\n                            (  store.getState().users.map(function(user){\n                                    return <li className=\"user\" key={user.id} onClick={() => this.updateUserId(user.id)}> {user.name} </li>;\n                                }.bind(this))\n                            ) : (<li>No users available</li>)}\n                      </ul>\n                  </div>\n                  <div className=\"flex-item\">\n                        {/*User Form*/}\n                      <div className=\"panel-title\">\n                        User Properties\n                      </div>\n                        <table className=\"user-editor\" style={{display:headerDisplay}}>\n                            <thead>\n                                <tr>\n                                    <th>Property</th>\n                                    <th>Value</th>\n                                </tr>\n                            </thead>\n                            <tbody>{tableRows}</tbody>\n                        </table>\n                        <button className='submit-button user-editor' style={{display:headerDisplay}} onClick={this.patchName}>Update Name</button>\n\n                    </div>\n\n                    {/*Rest Call Log*/}\n                    <div className=\"right-panel\">\n                        <div className=\"panel-title\">REST Call Log</div>\n                            <RestLog/>\n                        </div>\n                    </div>\n                <LoginPane callRest={this.callRest}/>\n            </div>\n        );\n      }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store.js'\n\nconst render = () => ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nrender();\nstore.subscribe(render);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"sourceRoot":""}