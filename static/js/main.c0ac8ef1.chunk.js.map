{"version":3,"sources":["logo.svg","RestLog.js","store.js","Login.js","App.js","registerServiceWorker.js","index.js"],"names":["RestLog","props","listen","ajaxListener","tempOpen","XMLHttpRequest","prototype","open","tempSend","send","callback","this","url","includes","log","method","split","data","a","b","apply","arguments","toLowerCase","onClick","clear","bind","messageLog","map","request","i","key","message","push","forceUpdate","Component","initState","users","username","password","loginToken","store","createStore","state","action","type","Object","assign","newUsers","token","loginParam","console","window","__REDUX_DEVTOOLS_EXTENSION__","LoginPane","updateLoginParams","login","formSubmit","display","there","that","callRest","readyState","DONE","JSON","parse","responseText","dispatch","Array","isArray","setState","alert","err","Promise","resolve","reject","getState","stringify","loginMode","getResponseHeader","parameter","e","target","value","preventDefault","then","getUsers","className","style","onSubmit","padding","placeholder","defaultValue","onChange","App","updateUserId","handleChangeName","renderPropertyValue","patchName","selectedUserId","selectedUserInfo","newName","endpoint","body","startsWith","substr","xhr","setRequestHeader","withCredentials","onreadystatechange","prop","charAt","toUpperCase","replace","uid","id","patchBody","operationList","ukey","index","findIndex","user","name","val","indexOf","Date","toLocaleString","userId","me","tableRows","userInfo","headerDisplay","forEach","cleanPropertyName","src","logo","alt","length","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","render","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","subscribe"],"mappings":"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","file":"static/js/main.c0ac8ef1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\timport React, { Component } from 'react';\n\n\t//react component to display all rest api calls in a simple unordered list.\n\texport class RestLog extends Component {\n\n\t\tconstructor(props){\n\t\t\tsuper(props);\n\t\t\tthis.listen();\n\t\t}\n\n\t\t//listener function for all xhr calls\n\t\tlisten() {\n\t\t\tvar ajaxListener = {};\n\t\t\tajaxListener.tempOpen = XMLHttpRequest.prototype.open;\n\t\t\tajaxListener.tempSend = XMLHttpRequest.prototype.send;\n\t\t\tajaxListener.callback = function () {\n\t\t\t\t// this.method :the ajax method used\n\t\t\t\t// this.url    :the url of the requested script (including query string, if any) (urlencoded) \n\t\t\t\t// this.data   :the data sent, if any ex: foo=bar&a=b (urlencoded)\n\n\t\t\t\t//filters xhr calls to only display calls made using the rest api. This can be modified to display more/less info.\n\t\t\t\tif (this.url.includes('api/')) {\n\t\t\t\t\tRestLog.log(this.method, this.url.split('api/')[0] + \"api/\", this.data, this.url.split('api/')[1]);\n\t\t\t\t}\n\t\t\t}\t\t\n\n\t\t\tXMLHttpRequest.prototype.open = function(a=\"\",b=\"\") {\n\t\t\t\tajaxListener.tempOpen.apply(this, arguments);\n\t\t\t\tajaxListener.method = a;  \n\t\t\t\tajaxListener.url = b;\n\t\t\t\tif (a.toLowerCase() === 'get') {\n\t\t\t\t\tajaxListener.data = b.split('?');\n\t\t\t\t\tajaxListener.data = ajaxListener.data[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tXMLHttpRequest.prototype.send = function(a=\"\",b=\"\") {\n\t\t\t\tajaxListener.tempSend.apply(this, arguments);\n\t\t\t\tif(ajaxListener.method.toLowerCase() === 'post')ajaxListener.data = a;\n\t\t\t\tajaxListener.callback();\n\t\t\t}\n\t\t}\n\n\t\t//log of all xhr calls\n\t\tstatic messageLog = [];\n\n\t\t//function to write to log\n\t\tstatic log(method=\"N/A\", url=\"N/A\", data=\"N/A\", message=\"\") {\n\t\t\tthis.messageLog.push({method: method, url: url, message: message, data: data});\n\t\t}\n\n\t\t//resets log of api calls and clears div\n\t\tstatic clear() {\n\t\t\tRestLog.messageLog = [];\n\t\t\tthis.forceUpdate();\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={RestLog.clear.bind(this)}>clear</button>\n\n\t\t\t        <ul>\n\t\t\t            {RestLog.messageLog ? \n\t\t                \t(RestLog.messageLog.map(function(request, i){\n\t\t                \t\treturn <li key={request.method + i}> <b>{request.method}:</b> {request.url}<b>{request.message}</b> <br/>\n\t\t                \t\t</li>;})\n\t\t\t                ) : (<li>No REST calls yet</li>)}\n\t\t\t        </ul>\n\t\t        </div>\n\t\t\t) \n\t\t}\n\t}","import { createStore } from 'redux';\n\nconst reducer = function (state, action) {\n    switch (action.type) {\n        case 'update_users':\n            return Object.assign({}, state, {users: action.newUsers});\n        case 'update_token':\n            return Object.assign({}, state, {loginToken: action.token});\n        case 'set_url':\n            return Object.assign({}, state, {url: action.loginParam});\n        case 'set_username':\n            console.log(action);\n            return Object.assign({}, state, {username: action.loginParam});\n        case 'set_password':\n            return Object.assign({}, state, {password: action.loginParam});\n        default:\n            return state;\n    }\n}\n\nconst DEFAULT_USERNAME = '';\nconst DEFAULT_PASSWORD = '';\nconst DEFAULT_REST_SERVER = 'https://env-nnnnnn.customer.cloud.microstrategy.com/MicroStrategyLibrary/api/';\nconst initState = {users: null, username: DEFAULT_USERNAME, password: DEFAULT_PASSWORD, url: DEFAULT_REST_SERVER, loginToken: null};\n\nconst store = createStore(reducer, initState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n","import React, { Component } from 'react';\nimport './App.css';\nimport store from './store.js';\n\n//this pane logs in and then immediately pulls the list of users from the server.\n//on fail, it will ask to log in again and display a user friendly error message.\nexport class LoginPane extends Component {\n\n    constructor(props) {\n        super(props);\n        this.updateLoginParams = this.updateLoginParams.bind(this);\n        this.login = this.login.bind(this);\n        this.formSubmit = this.formSubmit.bind(this);\n        this.state = {\n            display: 'flex'\n        }\n    }\n\n    //method using rest API to get a list of users\n    getUsers(there) {\n        let that = there;\n        there.props.callRest('GET', 'users', '', function() {\n            if (this.readyState === XMLHttpRequest.DONE) {\n                try{\n                    let newUsers = JSON.parse(this.responseText);\n                    store.dispatch({type: 'update_users', newUsers: newUsers});\n                    if (Array.isArray(newUsers)) {\n                        that.setState({display: 'none'});\n                    }\n                    else {\n                        alert('login failed');\n                    }\n                }\n                catch(err){\n                    alert('login failed!');\n                    that.setState({display: 'flex'});\n                }\n            }\n        });\n    }\n\n    //method to log in using rest API\n    login() {\n        return new Promise((resolve, reject) => {\n            if (!store.getState().loginToken) {\n                try {\n                    this.props.callRest('POST', 'auth/login', JSON.stringify({loginMode: 1, username: store.getState().username, password: store.getState().password}), function() {\n                        if (this.readyState === XMLHttpRequest.DONE) {\n                            store.dispatch({type: 'update_token', token: this.getResponseHeader('X-MSTR-AuthToken')});\n                            if (store.getState().loginToken) {\n                                resolve();\n                            }\n                            else {\n                                alert('login failed!');\n                            }\n                        }\n                    });\n                }\n                catch(err) {\n                    alert('login failed!');\n                }\n            }\n        });\n    }\n\n    //dispatches an action with type (url, username, password) that calls an action to update\n    //the store url/username/password respectively with the new value\n    updateLoginParams(parameter, e){\n        store.dispatch({type: parameter, loginParam: e.target.value});\n    }\n\n    //login button submission\n    formSubmit(e){\n        let that = this;\n        e.preventDefault();\n        this.login().then(() => this.getUsers(that));\n    }\n\n    render() {\n        return (\n            <div className=\"login-backdrop\" style={{display: this.state.display}}>\n                <div className=\"login-form\">\n                    <div className=\"panel-title\">Log In</div>\n                    <form onSubmit={this.formSubmit} style={{padding:'5px'}}>\n                        <label>\n                            {/*Login form sets login and url parameters for rest calls*/}\n                            {/*store.getState().x gets the current value of the field 'x' in the store object*/}\n                            <input type=\"text\" placeholder='REST API URL' defaultValue={store.getState().url} onChange= {(e) => this.updateLoginParams(\"set_url\", e)} /><br/>\n                            <input type=\"text\" placeholder='username' defaultValue={store.getState().username} onChange= {(e) => this.updateLoginParams(\"set_username\", e)}/><br/>\n                            <input type=\"password\" placeholder='password' defaultValue={store.getState().password} onChange= {(e) => this.updateLoginParams(\"set_password\", e)}/><br/>\n                        </label>\n                        <input type=\"submit\" value=\"Login\" />\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { RestLog } from './RestLog.js';\nimport { LoginPane } from './Login.js';\nimport store from './store.js'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        //set context for all functions\n        this.callRest = this.callRest.bind(this);\n        this.updateUserId = this.updateUserId.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.renderPropertyValue = this.renderPropertyValue.bind(this);\n        this.patchName = this.patchName.bind(this);\n\n        //Wrote this without redux - state contains a login token, information about the selected users, and login\n        //parameters for the api calls. Also a flag on whether or not to show the login div\n        this.state = {\n            selectedUserId: '',\n            selectedUserInfo: {},\n            newName: ''\n        };\n    }\n\n    /*\n        helper method for making rest api calls\n        @param method: the HTTP request method(GET, POST, etc)\n        @param endpoint: the API endpoint. Expected format: 'endpoint/'\n        @param body: the body to be sent\n        @param callback: callback function to be called onreadystatechange\n    */\n    callRest(method, endpoint, body, callback) {\n\n        if (endpoint.startsWith('/')) {\n            endpoint = endpoint.substr(1);\n        }\n\n        //create xhr request based on parameters passed into function\n        let xhr = new XMLHttpRequest();\n        xhr.open(method, store.getState().url + endpoint);\n        xhr.setRequestHeader('Content-type', 'application/json');\n        xhr.setRequestHeader('Accept', 'application/json');\n        xhr.withCredentials = true;\n        let token = store.getState().loginToken;\n        if (token) {\n            xhr.setRequestHeader('X-MSTR-AuthToken', token);\n        }\n        xhr.onreadystatechange = callback;\n\n        try {\n            xhr.send(body);\n        } catch (err) {\n            console.log(err);\n            alert('error: could not send http request');\n        }\n    }\n\n    //UserEditor functions\n    cleanPropertyName(prop) {\n        //makes display of prop names nicer\n        prop = prop.charAt(0).toUpperCase() + prop.substr(1);\n        return prop.replace(/([A-Z]+)/g, ' $1').replace(/([A-Z][a-z])/g, ' $1');\n    }\n\n    //handles a name change for the currently selected user\n    patchName() {\n        let uid = this.state.selectedUserInfo.id,\n        patchBody = {\n            operationList: [\n                {\n                    'op': 'REPLACE',\n                    'path': '/fullName',\n                    'value': this.state.newName\n                }\n            ]\n        };\n\n        //submits call to rest api for the name change\n        this.callRest('PATCH', 'users/' + uid, JSON.stringify(patchBody), function () {\n            if (this.readyState === XMLHttpRequest.DONE) {\n                alert('Name has been updated');\n            }\n        });\n\n        //update user name in list\n        const ukey = this.state.selectedUserId;\n        const index = store.getState().users.findIndex(user => user.id === ukey);\n        //as to not mutate state directly\n        const users = store.getState().users;\n        users[index].name = this.state.newName;\n        store.dispatch({type: 'update_users', newUsers: users});\n    }\n\n    //changes name in state whne it is updated in the text box, calls patch when enter is pressed\n    handleChangeName(e) {\n        this.setState({newName : e.target.value});\n        //on enter key press, make rest call to change selected user name\n        if (e.key === 'Enter') {\n            this.patchName();\n        }\n    }\n\n    //Puts date into human-readable format, and changes name display to an input textbox\n    renderPropertyValue(name, val) {\n        //date formatting\n        if (name.indexOf('date') >= 0) {\n            try {\n                return (new Date(val)).toLocaleString();\n            } catch (e){} //ignore\n        //name to input condition\n        } else if (name === 'fullName') {\n            return <input type='text' defaultValue={val} key={this.state.selectedUserInfo.id}\n                          onChange = {this.handleChangeName} />;\n        }\n        return val;\n    }\n    //end of UE functions\n\n\n    //changes selected user whenever a new user is clicked\n    updateUserId(userId){\n        this.setState({selectedUserId: userId});\n        let me = this;\n\n        if (userId) {\n            this.callRest('GET', 'users/' + userId, '', function () {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    me.setState({selectedUserInfo: JSON.parse(this.responseText)});\n                }\n            });\n        }\n    }\n\n    render() {\n        //more UserEditor stuff\n        const validProps = [\"username\", \"fullName\", \"id\", \"abbreviation\", \"dateCreated\", \"dateModified\"];\n        let tableRows = [],\n            userInfo = this.state.selectedUserInfo,\n            headerDisplay = \"none\";\n        if (userInfo && userInfo.id) {\n            try {\n                validProps.forEach(\n                    (prop, i) => (userInfo[prop]) ? tableRows.push(<tr key={userInfo.id + i}>\n                        <td>{this.cleanPropertyName(prop)}</td>\n                        <td>{this.renderPropertyValue(prop, userInfo[prop])}</td>\n                    </tr>):null\n                )\n                headerDisplay = \"table\";\n            } catch (err) {\n                console.log(err);\n            }\n        }\n        //end of UE\n\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <span className=\"App-title\">React User Manager</span>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n              <div className=\"container\">\n                  <div className=\"fixed\">\n                      <div className=\"panel-title\">\n                          List of Users\n                          <div className=\"subtitle\">Select user below to get user information</div>\n                      </div>\n                      <ul>\n                          {/*dynamic display for list of users*/}\n                          {store.getState().users && Array.isArray(store.getState().users) && store.getState().users.length > 0 ?\n                            (  store.getState().users.map(function(user){\n                                    return <li className=\"user\" key={user.id} onClick={() => this.updateUserId(user.id)}> {user.name} </li>;\n                                }.bind(this))\n                            ) : (<li>No users available</li>)}\n                      </ul>\n                  </div>\n                  <div className=\"flex-item\">\n                        {/*User Form*/}\n                      <div className=\"panel-title\">\n                        User Properties\n                      </div>\n                        <table className=\"user-editor\" style={{display:headerDisplay}}>\n                            <thead>\n                                <tr>\n                                    <th>Property</th>\n                                    <th>Value</th>\n                                </tr>\n                            </thead>\n                            <tbody>{tableRows}</tbody>\n                        </table>\n                        <button className='submit-button user-editor' style={{display:headerDisplay}} onClick={this.patchName}>Update Name</button>\n\n                    </div>\n\n                    {/*Rest Call Log*/}\n                    <div className=\"right-panel\">\n                        <div className=\"panel-title\">REST Call Log</div>\n                            <RestLog/>\n                        </div>\n                    </div>\n                <LoginPane callRest={this.callRest}/>\n            </div>\n        );\n      }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport store from './store.js'\n\nconst render = () => ReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\nrender();\nstore.subscribe(render);\n"],"sourceRoot":""}